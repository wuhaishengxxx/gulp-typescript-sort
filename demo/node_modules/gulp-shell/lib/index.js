"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var async_1 = require("async");
var chalk_1 = __importDefault(require("chalk"));
var child_process_1 = require("child_process");
var fancy_log_1 = __importDefault(require("fancy-log"));
var lodash_template_1 = __importDefault(require("lodash.template"));
var path = __importStar(require("path"));
var plugin_error_1 = __importDefault(require("plugin-error"));
var through2_1 = require("through2");
var PLUGIN_NAME = 'gulp-shell';
var normalizeCommands = function (commands) {
    if (typeof commands === 'string') {
        commands = [commands];
    }
    if (!Array.isArray(commands)) {
        throw new plugin_error_1.default(PLUGIN_NAME, 'Missing commands');
    }
    return commands;
};
var normalizeOptions = function (options) {
    if (options === void 0) { options = {}; }
    var _a;
    var pathToBin = path.join(process.cwd(), 'node_modules', '.bin');
    var pathName = /^win/.test(process.platform) ? 'Path' : 'PATH';
    var newPath = pathToBin + path.delimiter + process.env[pathName];
    var env = __assign({}, process.env, (_a = {}, _a[pathName] = newPath, _a), options.env);
    return __assign({ cwd: process.cwd(), env: env, shell: true, quiet: false, verbose: false, ignoreErrors: false, errorMessage: 'Command `<%= command %>` failed with exit code <%= error.code %>', templateData: {} }, options);
};
var runCommands = function (commands, options, file, done) {
    async_1.eachSeries(commands, function (command, done) {
        var context = __assign({ file: file }, options.templateData);
        command = lodash_template_1.default(command)(context);
        if (options.verbose) {
            fancy_log_1.default(PLUGIN_NAME + ":", chalk_1.default.cyan(command));
        }
        var child = child_process_1.spawn(command, {
            env: options.env,
            cwd: lodash_template_1.default(options.cwd)(context),
            shell: options.shell,
            stdio: options.quiet ? 'ignore' : 'inherit'
        });
        child.on('exit', function (code) {
            if (code === 0 || options.ignoreErrors) {
                return done();
            }
            var context = __assign({ command: command,
                file: file, error: { code: code } }, options.templateData);
            var message = lodash_template_1.default(options.errorMessage)(context);
            done(new plugin_error_1.default(PLUGIN_NAME, message));
        });
    }, done);
};
var shell = function (commands, options) {
    var normalizedCommands = normalizeCommands(commands);
    var normalizedOptions = normalizeOptions(options);
    var stream = through2_1.obj(function (file, _encoding, done) {
        var _this = this;
        runCommands(normalizedCommands, normalizedOptions, file, function (error) {
            if (error) {
                _this.emit('error', error);
            }
            else {
                _this.push(file);
            }
            done();
        });
    });
    stream.resume();
    return stream;
};
shell.task = function (commands, options) { return function (done) {
    runCommands(normalizeCommands(commands), normalizeOptions(options), null, done);
}; };
module.exports = shell;
//# sourceMappingURL=index.js.map